good morning everybody david shapiro here with a new video about gpt 3. so in this one we are going to address a common problem that people have which is the gp gpt-3 there you go will make stuff up so this is called hallucinating or confabulation um really from a from a neurological standpoint it's actually confabulation because it's making up facts based on a few data points it's not fully hallucinating but some people call it hallucination i call it confabulation i was recently given a challenge where someone said that they were working on a problem of having like a chat bot look at a patient's um texts or uh graphs and it was just making up medications like you ask like what what medication is grandma on and it'll just make stuff up and i said oh that's an easy problem and they're like go on um and i said well so the way that humans do that is that if i ask you a question um your brain will give you a signal i have that answer or no i don't have that answer you get different wave of different brain waves depending on whether or not you know something because what happens is while you're talking with someone every little clue that you're given your brain is like going you know squirreling away trying to find um where that information is stored and if it gets if if it gets a 404 not found error you get that signal so what we have to do is we have to train gpt3 to recognize that it doesn't know something that something is not present in a text so i happen to have whoops i happen to have um about oh how many is this a whole bunch of medical texts from a previous project i have over 4 000 medical texts we only need 200 to get started so what i'm going to do is i'm going to go ahead and create a new repo and we're going to call this medical question answering okay we'll leave it public add a readme and a license mit because sharing is caring create repo medical question answering copy i get clone so start brand new hot off the press context so from this old one um we will just go ahead and copy in this information oh yeah this this folder contains like 50 000 context um this is like my default like hey i want to train on a whole bunch of different scenarios i scraped this data together from a whole bunch of different sources unfortunately i didn't write them all down which is bad but i got them all from the internet i got them from kaggle mostly kaggle and google data sets so if you go to while this is copying let me just show you so that way you know this thing kaggle.com so you go to kaggle.com datasets and then you can just do like medical i was probably here medical images medical transcriptions i think it was this one um 2300 unique values maybe not anyways this this kind of thing and then you can also go to datasets.google.com or maybe not google datasets data search data set search okay here you get it here it is and then you can just do like medical um healthcare patient records for nlp yeah so you can get all kinds of stuff here you can also search for legal like if you want to fine-tune something that's going to do like a lawyer bot um so yeah those are those are your too far and away your best sources anyways let me this has taken a while so let me pause this real quick and we'll get back i'm not gonna do anything we're just gonna pause wait for this to finish okay and we're back we have finished we've got a folder of 3060 medical texts i deleted the ones that were too big and too small some of them were like 18 kilobytes which is you know 15 000 characters too long to fit in uh in a gpt3 prompt um so the biggest one is now um 3 800 characters which is that's on the that's on the bigger side um but then also on the smaller side we've got uh 1200 characters so i've already done a little bit of of prompt engineering so i apologize for not showing you that but let me show you what i did so here's the input or here's the instruction the following is a patient chart determine whether or not medications in parentheses were prescribed was let's say we're prescribed um and then so i tested was a medication prescribed yes or no so basically we have to break this down into several cognitive tasks for for creating the training data because gpt3 is just a prediction machine it does not have it i mean it has the ability to do thousands of tasks right but unless you train it on which one to do it's going to get confused because it says oh i'm looking for medication let me just spit it out yes um so what happens is oh also i turn the temperature down to zero so if you turn the temperature down to zero that means it becomes deterministic meaning it will always spit out the same answer which if you want um just a yes or no answer a temperature of zero is the way to go because that'll also give you the most reliable performance okay it says yes okay then list medications prescribed decadron and so we see like okay what is that and oh look it's right there she is also on a short course of decadron perfect um and then if we do a quick search for decadron um we see like used to treat conditions such as arthritis blood hormone disorders allergic reactions skin disease wow this can treat like everything this is like this is like a hypo spray for star trek isn't it this can it's just like oh dr crusher's like here you're all better now okay so it accurately said decadron excellent we're off to a good start um but let's see what happens larry let me copy this because this is a good prompt so if we just say uh let's see list any medications prescribed so this doesn't always work but so in this case there was a medication um prescribed but if there isn't one and we'll show you that in a second it might not work so in this case it's it's wrong because the morphine sorry my voice kind of cracked morphine i sounded a little bit like i'm not i'm not going to pick on anyone actually local conscious sedation with morphine and versed so that was during so that's not that's not a prescription that is used during it right so you see it's like okay this isn't exactly right we're looking for what has been prescribed we're also going to um do a few other questions so like uh let's see let's bring this back so just just showing you that it depending on how you change the prompt you get different results the following is a patient patient chart sorry struggling drink some water determine whether or not prognosis whether or not a prognosis was given okay um was a prognosis given yes or no yes okay what is the prognosis prognosis prognosis is excellent was that word used her prognosis is indeed excellent word for word okay um so we would probably in an ideal world we'd want to capture this comment um but anyways uh still the fact of the matter is it is directly getting information so by breaking this and by breaking this problem into two tasks we are um we're making it better and so what i'm going to do is i'll show you how to fine-tune this so that that way you can just do it in one go excuse me okay um although i guess there's nothing wrong with just having multiple prompts because like if you just do if you just do this and you do a search on the output yes or no um then you can run it again however you will still get some variants and if you if you fine-tune a model and you you pick and choose the kinds of responses that you want you'll get far better more consistent results so this is where fine tuning really shines because fine-tuned models tend to be less creative and if you're just answering questions you don't want creativity that's the whole point right confabulation or hallucination um so a little bit of neuroscience there are um disorders out there where people will just confabulate everything um there was one story that i read i think it was in um i think it was in phantoms in the brain where um a little girl was like her iq was super low like she was she had severe like mental handicaps but her she was verbally brilliant her brain just understood language and so she would just confabulate entire stories about her life and she would tell these eloquent stories about this wonderful day that she had with her boyfriend and how he proposed on the banks of a river and it's like this is like an eight-year-old girl she has no idea what she's talking about so her brain was just completely confabulating and if you read that passage and phantoms in the brain it almost looks like something that gpt-3 would spit out um so yeah so gpt3 has a neurological disorder where it just confabulates language so we have to train it to have what is called information literacy or theory of mind so i made another video talking about theory of mind where theory of mind is where you're consciously aware of what you what what is in your head so like if you have theory of mind you say oh i'm experiencing this emotion or i have this knowledge or i don't right gpt3 doesn't have that by default it doesn't know what it doesn't know or it doesn't know what it knows um it has no idea it has no mental index like you or i have so what we have to do is we have to fine tune that in so that's what we're going to do next um so we're gonna have a few um we're gonna have a few prompts and so let's start cleaning this up so we're gonna we're gonna call this the context um we'll remove the rest of this actually here let's save that because that'll be a second one um all right so then we'll just remove the rest of this um so we'll do that we'll call this one um prompt boolean and then we'll do medication okay and then we'll say um all right so then we'll do this so assuming that it passes we'll just leave this here um so that way you know the the rest that when we fine tune it it'll say okay i'm supposed to give you a list um and then we'll say prompt list medication okay so basically we're breaking the problem down into a bool boolean which is true or false and then a list problem so this is two separate cognitive tasks but what we're going to do is we're going to fine tune a model to do both of those in one go this is a relatively straightforward thing so i have a very high degree of confidence that it will work but we want to we we don't want to we don't want to fine-tune an entire model just to find medications sure there's value in that but you know the context that i was given for this problem was imagine you've got um an app right on your phone that is meant to be um like to help you coordinate it's like a single source of truth for your home care team and it's also an interface with your professional care team so say for instance you know grandma's sick you've got 20 family members trying to look after her plus 20 doctors and nurses you all need a single source of truth without having to call each other up so the the problem here is like okay you need to just say like what medications is grandma on and it's got to go through like many many records right to figure that out because ideally you want to figure this out automatically as far as i know this is not commercially available yet this is still being like worked on i don't know anyways this is how i would approach it um okay so then what we'll do is we'll just take this base prompt and we'll go back to what i said determine whether or not a prognosis was given and then we will do the same thing here okay was a prognosis given yes or no so we'll do prompt bull prognosis prognosis there we go and then we will do this with that and probably what i'll do is um i'll probably pause the video because some of this data we would benefit from having someone manually look at this but you know what just for the sake of like experimentation no i'm not going to manually clean it up i'm going to test and see if i can do this whole thing automatically so most of the videos that i've done up until this point have been with synthetic data sets so this is the first one that will be with actual real world data so synthetic data sets are one thing but um uh real world data is a whole other animal um so let's get rid of that okay so medication prognosis let's do diagnosis as well diagnosis was a diagnosis given um prompt bool diagnosis um and then diagnosis what is the diagnosis yes prompt list diagnosis okay and let's let's imagine what's a fourth task that we could do with this um prognosis diagnosis medication tests that was the other one because in a lot of these um you know in this case no medical tests no follow-up tests were ordered so determine whether or not um follow-up medical tests were ordered so let's see was they follow let's see were follow up tests ordered yes or no okay in this case no hmm list follow-up tests ct scan wait really the patient will be subjected to it oh oh all right i was wrong it was right look at that look at that okay see gpt3 is smarter than me thank you gpt3 i shouldn't make that voice that's insensitive to people with speech impediments okay so let's go let's go or as the young people to say lfg um okay so then we'll do context or follow up tests ordered yes or no dang dang um no this will be list um tests and then what we'll do is we'll just copy that and then remove that and we'll say the save this is prompt bool tests okay there we have it okay so now we've got eight prompts am i counting right yes we've got eight different prompts that we are going to um that we're gonna do um i don't want to bore you to death with writing up a script that will just go through and do these um so i'm going to pause the video i'll write a script to generate this input and output and then we'll be back excuse me that'll just be less pressure on me and less boring for you so time will pass and you will come back to see a finished script and we'll watch it run with um generating some of these outputs for the training data and honestly we're most of the way done already the the the data so as um as a senior data scientist i i he jokes that he is senior both in experience and age um told me once the hardest job for this is always getting the data the second hardest job once we're now that we're in the the realm of llms is prompt engineering once you have the data and the prompt engineers are engineered um you're 90 of the way done now it's just a matter of synthesizing it all and training the model and away you go so sit tight we're almost done okay i lied it's not quite as straightforward as i promised um it happens so basically what we have to do is we have to do some noodling to figure out how do we want the final product to look um and so what we're going to do is we're going to do just kind of like rough sketch so this is what's called a mock-up like if you're if you ever do agile or whatever you can use like you know crayons or whatever to design how you want a website to look but you can do the same thing for data so what i'm doing now is i'm planning how do i want the data to look um and so the example will be prompt and so it'll be like medical text and then new line new line diagnosis and then that'll be the end of the oh yeah i guess json l is double quotes not single quotes and so then it'll be completion um and so what the completion will look like is either um none found or um or list of medications so basically we're trying to um kind of consolidate it down and what i mean by that is if the boolean comes back as no then it's over then it's just the answer is none if it comes back yes then what we have to do is get that answer so we will have to record that as we go so that will be medical text so this will be another example n um oh wait diagnosis or list or diagnosis um and then medications and then we will say completion is none found or list of meds okay so this is the goal and i guess actually um yeah i think this is the format that json l follows i always have the script to generate it for me okay so this is what we're trying to do so since i got started let me go ahead and show you where we're at okay so this is super simple so far this is this is my standard approach so i've got a function open file save file it's very straightforward it's just reusable code i've got another function to handle the gpt3 completion and what it does is it strips off any excess and then it also saves it out to a log file because this is really helpful especially since i've got a whole bunch of stuff running in the background that i'm not necessarily watching it helps to be able to see like what it actually spit out um okay so let's see get the boolean answer and what we'll do here is um and so notice here it says it does the strip so if if it's no if it's no then that then the answer is done so let's actually go ahead and do result equals list so this is where we'll accumulate the final data okay so boolean equals completion.lower so if boolean is yes actually no we'll say no because that's the that's the easier answer so if it's no then we'll say um info equals actually we can just do result dot append and the answer will be so let's say prompt equals um actually i should probably just go ahead and open this medical text since we're going to use it twice equals choice um here let's break this up into several parts file and then we'll say medical text equals and we'll just copy this out open file medical text okay um read the medical file there we go uh okay and so if it's no then we know that it's done and so we'll say so the final result will be percent s which allows us to swap out a um a variable and then we'll go line new line um and then we'll say um oh i got to know which one it is hmm yeah because of what i do is i have a list of booleans a list of folders here or files so if if it's diagnosis okay so here's what we can do um yeah i gotcha this will be fine um where can i do this i'll just do it here so we'll call this the um the d mark so the demarcator is let me show you what i mean by dmark so this right here is the demarcation so this tells this tells the model that the input is done right and it's time to do something else um yep so what i'll do is i'll do dmarc equals filename dot replace and what we're replacing is this part with nothing and we're also replacing the dot text at the end with nothing and then we're gonna do upper so that way like it'll end up with like diagnosis all caps and medication all caps and prognosis all caps and tests all caps okay so then the prompt what we'll do what i like to do is actually have um have uh like have the instructions before and after um but let's try it without i think it'll be fine okay so also one advantage of having an all caps demarcator is that it's very distinct like if you look at some of these medical contexts if you see something in all caps it's very obvious oh but this could be a problem yeah because it will have seen this token before so it might mistakenly um say like oh you're done so this is this is the diagnosis let's think about this for a second um so we'll actually do the prompt we'll call will be list all um and i think it'll be important to so this will be like list all diagnosis or list all um list all medication or list all prognosis or list all tests um yeah okay so that will that'll give us a much more unique demarcator and so it'll know to look for the list all as well um because this is this is also where uh where it's helpful to include plain text instructions at the end of fine tuning data especially for multiple multiple tasks okay so list all and then we're going to populate it with the first one is going to be the medical text and the second one will be the d mark and so if you have two dollar s so basically this says put the variable in the string as or put this variable here as a string so if it sees two then you need to have a tuple that's what this is called um okay so that's the prompt as populated and then the completion will be the boolean dot upper because we want it to just do the all caps thing um okay so basically what this if if the answer is no if whatever the question was is no we're done um just append the data and move on if boolean is yes then we need another we need another step and so what we're going to do is we're going to um we need that we need to keep this medical file and the medical text and so what we need to do is that we actually need to get another answer so we'll say okay we actually need to get um so we're going to replace the file name file name equals file name dot replace and we're going to replace the bool with list um and so because what you see is like the diagnosis this is part one and then the list diagnosis is part two so we're just going to assume that this is what it looks like but instead of having all this other junk around it we just want the answer what is the diagnosis sound good okay and then also what we'll do is we will add we'll add a space here so that way there will be actually no i think you're supposed to have a space before so we'll just do space plus so basically what that'll do is it'll add a space between the answer and that last colon um i think that's the the right way to do it you could probably do both um yeah let's do both why not okay so we're replacing the file name so we're gonna grab if the answer is yes if the job isn't done right yes it's like oh there is it is here okay what is the diagnosis okay so then we will want to do the same thing where um prompt equals open file name context so yeah we're this is this will basically be the same where we just put the context back and we ask it again also i want to point out i changed the temperature to zero because we want this to be deterministic we don't want any creativity um just give me the answer yes or no let me add update the prompt file name to find the answer okay so then the completion you get the list answer okay and so then whatever this is should be done now um we'll leave it whatever it comes back with upper lower so then we will do this we'll copy this because it's mostly the same um so but instead we'll say completion equals that plus completion okay i think that's it i think that i think that'll do it um but what we should do is um actually print this as we go um so so that we can actually see it so let's split this out this is this is why so if you you notice in my code i tend to be very procedural this is why because yes you can stack stuff up but then it makes it harder to um to diagnose and print so like print info um and oh actually if it's if it's not found we know that it's no so actually this the completion should just be see and this is also why um completion should be none found um so we want something very specific there okay print info print result that happened okay and so then we'll do the same thing here info equals that we'll print info and then we will um we will brain what are you doing we will append the info sometimes my brain just says what were we doing huh huh i want to do something else i know you're probably thinking that's a sign of adhd um probably whatever okay i think this is good um let's do it a quick test i know you all like to see when things blow up um you like to see uh see my diagnosis my troubleshooting process so let's do this cd what is this called medical python generate well there's your first problem medical texts um oh there's no comma there let's see what line is this line 55. i only drive 55 okay okay did you mean a literal sure oh huh there's a really important step i missed here did you catch it you actually have to save your data um so what we'll do is with all the data there all the stuff is going to be saved actually you know what i have we don't need these these extraneous folders let me open a previous project and i'll just copy the function that i use to format the data because this is kind of an all-in-one with medical.json l as out file for i n result json dump i out file out file write slash n that should be good i think that's the same format yeah because this is prompt completion prompt completion okay so let's close that rapid prototyping man it's a it's it's a special kind of drug okay python generate data and hey look at that completion mesothelioma that was fast chief complaint i need refills why are you going so slow so while that's running we can also check our logs whoa hold on it is doing stuff but it's not showing me what's going on the following is a patient chart whether diagnosis was given what is the diagnosis am i grabbing the wrong prompts it kind of looks like i am yeah because this is this is jumping ahead hmm i have done something wrong this always happens the prompt is open the file name hang on we're going to need to open a few of these let's open a few in sequence because it should be one after the other okay so this one is dot 234.99 let's see two two three four four dot nine okay so these two are one right after the other was a die why isn't this working i have done something seriously wrong it's like it's [Music] let's do a little bit more let's see print we're going to say we're going to print out the medical file so that we can see that and then we're going to print out the boolean and so then we will do yeah we're also going to print out the um the file name oh that's what's happening i changed the file name and it's not re-initialized damn it okay so what we need to do is do new file name i bet that's what it was so then we'll say file name yeah because if you change it then it's only going to do the wrong one every time yeah don't mess with don't mess with your important variables when in the loop okay i think i fixed it i think it's good now python generate data yes yes yes yes these are all positives intramuscular lipoma epididym [Music] hey if it's all yes that's fine you know i would like to see some that have no but given the fact that these are medical records there's probably gonna be well child check malnutrition diagnosis yes okay this is running so rather than watch all the data go i'll go ahead and pause the video and we'll explore the data once it's done um let me just show you while it's running in the background so we've got um for file name and bools so we've got um we've got four different prompts and we're going to do each one 50 times and then so we do a seed and then we do a random choice so i've got up here import random seed and choice so out of those 3 000 contacts we're just going to pick a random one every time so that's better than doing shuffle or whatever so we're going to get 50 choices this is also good because you don't want to ask the same question against like the same four questions against one medical text you wanna you wanna show different pro or different contexts with different questions because that forces gpt three to think a little bit harder so that means we'll have 200 different different samples to pull from and then we'll look at the final data once it's done and uh yeah so like i said we're almost there sit tight i've made a critical mistake i broke one of my own rules which is you're supposed to save your work as you go and this is why it got to the very end error name json is not defined it's fine it's fine okay so let's fix this real quick and then we'll run it again import json and then what we want to do is regardless of what the what the result is we want to save it so we will um how should we name this we'll probably just do um let's see out file name equals let's see how do i usually do it um we'll just say completion underscore that dot um now we'll say json l just json that's fine and then we'll do time and then we will do with open and then we'll say um i'll just say data slash that out file name because if i got to this point and it blew up i could have just merged it all together but let's fix it let's do it right save your data as you go actually i suppose you know what i do have it saved i've got it all saved in the gpt3 logs um but rather than clean all this stuff up um let's just do it the right way let's just do it the right way write and that should be enough as out file json.dump info to outfile that should be good okay this was self-inflicted 100 self-inflicted let's run this again and watching it run it worked beautifully oh wait wait wait wait wait yeah i need a data file or folder yep it probably said not found or maybe i cancelled it before okay so it should be saving yeah look at that so list all diagnosis completion laparoscopic cholestectomy okay so we're saving all the data there it's kind of funny that um i haven't used notepad plus plus always for json um completion left plural effusion okay last time i swear you can see it working the data is here it's accumulating we've got 17 out of 200 done so all right pausing the video one last time and then i guess we have to do the fine tuning test and we're done uh we are done with not the whole thing but most of it so let me show you we now have 199 samples out here um some of them say like none found um let's see list all tests the patient will go home with vicodin for pain and follow up postoperatively in the office where we will review the path report with her that is a great output look at that so that's not necessarily a test though so okay that's basically a follow-up this is another good reason that i should have followed my own rules which is just accumulate the data separately because then you can go through and manually fix these so i'm not going to worry about that this time but also what you can do is if you accumulate the data like this you can run it multiple times and so because this is just 200 samples but what if you want like 10 000 samples to train on that'll be better um so yeah so now i've got a separate function or a script just to format the data so we'll do python format and that should create a little guy here called medical.jsonl why is it all in quotes that's not right man i'm having a rough day of it trying something new like i said playing with real world data is a whole different animal um oh i think i know what i did right because i didn't read it i just read it as a string so we actually don't need to do a json dump we just need to out file right content plus n so let's try this again and then it should reload it yes there we go that looks right yeah yeah okay so then if we do a search for like none found you see it's got plenty of examples so counterexamples it'll know to say none found so here's another thing with fine tuning you can have some errors in the training data um like you know like that last one that i showed you i think it's the very last one yeah so the patient will go home with vicodin and pain because that's not really a test but because there's almost 200 other examples it will kind of like smooth that out it'll be like oh maybe that was the wrong wrong answer so now we've got fine tune so because this is a relatively straightforward problem i'm going to try and fine tune it on curie which is 10 times cheaper to fine-tune and use than davinci which so this is like you know operational costs so let's go ahead and do python fine tune dot pi make sure it goes file uploaded and it's pending okay pending um okay so we'll pause it one last time and once it's done we'll go test it it's almost over sorry this video is so long alright gang it's all done um the uh the fine tune is done fine tune david shapiro medical questions so let's give it a test let's open up a random context so we'll just completely random feet and hand cramping so what we'll do is we'll just grab this one whoops you don't need to see my spotify and we will try each of those endpoints or each of those tasks so list all medications medications and you see i've got the temperature set to zero maximum length 256. hmm [Laughter] hiv lots of hiv uh that could be because we fine-tuned on curie that's funny um all right but let's see was this even used yes it takes insulin bacitracium yeah okay so we'll call that a partial success again this started on davinci and we fine-tuned it on curie so might not might not work okay um list all tests non-specified yeah see it's getting it's getting super super repetitive yep does the patient have hiv the patient has a history of hiv for 21 years yeah okay um but yeah okay so it was correct and that it said and unspecified um it's interesting that it keeps spitting out more i'm wondering if that's just because we we fine-tuned it on curie i'm not going to worry about refined tuning this the data's out there you can test it yourself on davinci we can all you can also just take the script and just run it again and get more data um yeah okay so tests let's let's also shorten the output length to like 20. um list all prognosis so what did i do diagnosis prognosis medication none found none found found this thing is glitchy okay so this we'll we'll say that this is only a mild success um so maybe maybe this task is too complex for curie yeah okay so i diagnosed this with broke i diagnose you with dead um okay so curie doesn't work don't waste your time on that um let's try a different one just to see so we'll grab another neighbor of this one four thousand actinic neoplasm that sounds painful um nan why does it say nan okay um list all medication wow i misspelled it the same way um okay list all medication maximum length 20. bacitracin ointment and then what is the element radio frequency then shave shave excised for the upper dermal layer with the element radio frequency wave unit interesting i don't know if that's actually a medication but it looks like a a process was done 50 trike let's make this a little bit longer let's go 40. okay so yeah it looks it looks like a pretty definitive um curious not up to this task list all diagnosis enlarging skin neoplasm actinic neoplasm left after left upper cheek that's fine and then we'll do prognosis oh that's not bad and then it starts repeating itself yeah um and then what was it tests let's all test for a recheck yeah okay that's the same thing okay um i was hoping this would do better but again right at the last minute i decided to try and experiment and run it on curie i think this is definitive that the curie is meh probably with more training data curie could work better because remember 200 is the minimum so if i were to do this again i would say let's double triple quadruple the number of samples let's manually check the samples to make sure they're good and then also let's try it on davinci i will let you the audience try this because the scripts are here so all you have to do is just run generate data and it will just accumulate more data in here and because it'll pull from four thousand or three thousand medical texts um and then so you generate more data then you format the data it'll replace the medical.json file so this is 503 kilobytes and then you run fine tune and away you go um thanks for watching uh this was really informative i hoped you liked it and got a lot out of it