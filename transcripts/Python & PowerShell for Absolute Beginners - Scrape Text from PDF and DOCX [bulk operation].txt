morning everybody David Shapiro here everyone has been clamoring for more tutorials and it took me a while to figure out what to give you a tutorial on because my most popular tutorials are like the basics the introductory stuff um obviously everyone's got to start somewhere so I figured let's start there um someone asked on a comment they said hey can I get a couple hours of your time I need your help I said no I don't have time for that just tell me what you need so if you need something post it in the comments if it's a good request I'll just make a video on it and then I'll help everyone um so I I I would help people one-on-one but I really don't have the time for it okay so today we are scraping PDFs and Word Documents this is something that I figured out because well a lot of data comes in those formats and I wanted to also give you all you new folks to large language models a couple of pro tips on where to find data so kaggle.com datasets this is one of the best places to find data sets you can also find it on GitHub if you just if you have a data set in mind you could search for like um like case law data set um and then you search all of GitHub and you can probably find it yeah so there you go so GitHub is a great place to find data um but kaggle these are these are well curated data sets and you can search by type there's also Google data so it's datasetsearch.research.google.com they often will kind of point at each other it's kind of funny because this will often point a kaggle and kaggle will often point at Google but anyways between those three sources you can find some some good data another one of my favorites is Gutenberg because it's all open source so anyways let's assume that you've got some PDFs and Word Documents that you need to scrape and you want to do it as quickly as possible so I got you covered so this repo up here it's not updated yet I'll I'll update it once it's done but it's really simple really straightforward there's two Scripts now you can do Word documents in Python however I found that Powershell is infinitely better so first let me just show you what we got here I tried Pi pandok Pi PDF and um and and uh so Pi pandok that was for for word doc it does work for word doc okay or for docx um but there's a lot of like artifacts left over and stuff so it's not the best Pi PDF I tried that it wasn't the best for PDFs PDF plumber was actually the one that I found was the best for PDFs so let me walk you through this function real quick um so I wrote this function and feel free to reuse this it's convert PDF to text the reason that you want to do this is because large language models can't read PDFs and Word Documents you need to convert it to something that is readable such as ASCII or Unicode in order to do language operations on it so on this function you give it a direct source directory and a Target directory and what it'll do is it'll go through and read every file in that directory that ends in dot PDF and then it will convert it convert it for you so what you have to do is because PDF stands for portable document format and so it's basically a digital printout which means it's organized into pages so what you have to do is you open it you say use PDF plumber oh and if you're new to python this is what you need to do you do a pip install PDF plumber if you're not familiar with how to do this go back to my original tutorials about getting set up so just this is the only requirement for this one um so PDF plumber output for page and PDF pages and let me go ahead and remove these since we don't use them because they did not work um and I'll go ahead I'll I'll leave here actually um I'll leave the pie pan doc one here um import ipan dock but I'll comment it out so you can experiment with this one if you want to um but I didn't find I found that that word worked better but I'll leave it here just in case anyone wants to use it all right sorry I'm being a little bit 80d because I haven't had my coffee yet but anyways so what we do here is we have two nested for loops so four file in files and you might so for python noobs you might see that I say try and accept so one of the rules of thumb of python is it's better to ask forgiveness than permission so rather than testing the file to make sure that it's healthy and viable I just say give it a shot see what happens because one thing with PDFs is they can be malformed like they have um they have header fi uh headers and other aspects I'm not sure I don't know what what's actually in a PDF file but I do know that they blow up sometimes and so by wrapping this this loop with a try except um so it's going to try the file and if it blows up it'll just print out and tell me what went wrong um so I get a nice little handy dandy output um and it'll it'll say like hey this is the error message um and and we'll go from there um let's see so yeah so for page in PDF dot pages so you see here so we're opening this whole thing the PDF file as PDF object and then so for page in PDF dot Pages because remember it's a it's a printable document format or portable document format so we have to iterate through the pages it's like you're reading the pages one at a time in a book right and so then we say uh page dot extract text so we get just get the raw text out of it and accumulate this in a in a string variable called output so we get the text and then we add it and you can add another D mark so I just have Slash new line but what you could do you could do um here let's do it like this we'll do a new page because you might need to break it up based on pages so that way you want to you want to retain some of that formatting information so you can you can change this change this for your page demarcation and then once so once this for Loop is done then it will take that output and say okay we'll use the destination directory and then we'll replace dot PDF with DOT text and then we'll save it out with the same file name as the source and so then what you do is you have a folder full of PDFs I've just got one I use the uh the VMware integrated openstack administrations guide so let me show you what this is so lots and lots of text and graphics and 200 pages so imagine that you want to do um I I get requests like this all the time where it's like I have a KB article or a book or you know like this is this is essentially a textbook right for technology people you're like I have a book that I want to scrape this is how you do it um you get the you get a PDF or a Word document version this is how we go so that's this let me just go ahead and run this and show you it's it it's super fast so python convert PDFs and it won't show me any output so what it's doing right now is it's reading through that big giant document might take a moment there we go so it read the PDF and then it dumped it here so now it went from a let's see 2.3 megabyte PDF to a 353 kilobyte text document and there you have it it is nice and clean and you see we've got the new page dmarc here so I know exactly what's on each page you can add a counter if you want right so anyways all of that text is now all the commands everything whatever's in that book is now available to be read by a large language model and you can do other stuff you can do indexing and and um and whatever so check out my other videos if you want to know how to search it um okay so we got the PDF this function worked just fine ready to go so let's move over to Word documents so the same thing is true so the best thing to read a Word document is Microsoft Word so this works best if you have Microsoft Word installed old so this one was a random data set that I found I think it was like for Emergency Shelters yeah okay so this was available online as you know NLP training data I'm not sure why you'd want to use it but the fact of the matter is a lot of a lot of data out there is going to be in Word document format um so there we've got that guy and it's in a folder called docx and then I have a Powershell script so dot PS1 so we're branching out of python Powershell and python are actually very similar um in in many respects both they're both interpreted languages they're both object oriented there are a few differences in in the paradigms of them um and I'm not going to get into a super lot of detail but I use ISE so Windows Powershell ISE is is called the integrated scripting environment um and so this is what this is what this script looks like convert docx so first rather than importing stuff there are modules in Powershell but we don't need to import anything because it's this comes from the uh from the operating system right so new object com object word dot application so the operating system knows how to interpret that um and then I don't remember what word.visible equals false does I think this it means that it opens Microsoft Word headless which means it's not going to show me the the the the graphic interface so then like in the like in the uh the python script we have a source directory and a destination directory so we've got docx and we're going to put it into converted so what we do is then we get all the files in that Source directory where the file name is like docx because we don't want to try and do this on any other file types and then four file in files we open we open the docx we change the name and then we save as text so because we have another application that already can do the save as operation this is basically just opening opening it and doing save as text version I found that this works infinitely better by preserving the intent and format of the document using the pipan doc you lose a lot of stuff and it's not it's not pretty so let me just go ahead and show you so the the easiest way to run this is you got just hit start and it I have it print out which which one it's doing um okay so then we'll go to converted and now we have here you go you've got it all converted and you see you see how the the text like the the dashes are all nice and preserved um Pi pandok doesn't always do it this well um but this is nice and really clean um and now you can see that the encoding is utf-8 rather than docx so now we've got a universal file standard that is easily readable by any machine and there you have it this is this is the tutorial for the day let me go ahead and just do git status get add get commit am tutorial is done and get pushed so now this is up there for all of you to use um and and happy happy converting files in bulk uh you're welcome good night