morning everybody david shapiro here um today we're going to test a uh semantic search um uh search engine uh database so what is this um there are a few major contenders out here so first we've got we v8 vector search engine it is i think it has a community edition start free pay as you go yeah yeah yeah so um there's that one there's pinecone which is cloud-based so this is sas there's milvis which is open source and runs locally on docker and then there's quadrant or cudrin which is uh very small and it's also runs on docker so i'm going to start with this one because it is tiny so pre-built docker image only 40 megabytes um so this is where we're going to start today so let me close a few tabs so first if you've never used docker before here let me make sure you're looking at me um there we go sorry about that um so if you've never used docker before this is what it looks like um docker desktop it allows you to run containers so you can run linux based containers uh on windows or mac or whatever so there's one thing that you need first is um you need to download the uh windows uh the the linux kernel to run on windows download this install it and then reboot and then you can download and install docker desktop which also requires a reboot anyways so docker there's hub.docker.com which hosts it's like it's like a package container but for for images um and so basically when you do a docker pull um this is where it pulls from pulls from docker hub um yeah so getting started is super simple once you install wsl if you need it if you're on mac or linux then you don't need wsl and you can just install docker desktop directly so what we'll do is we will do docker pull uh no i'm going to go ahead and do this so and i've got a um so i'm gonna i'm gonna have all the code that i do in this github repo by the end so we're just starting from scratch um okay so docker pull quint and you see you it runs through its process here let me make this just a little bit bigger font we'll go up to 28. there we go okay all right so now what do we do um we've got downloaded image so so on and so forth and if we go over here um you'll see that quadrant is now here and you can do it here too like you can search um i actually no this is um yeah this is this is uh my images um how do you i think there's a way to search anyways point being um i got it downloaded from here so let's check out their quick start guide so we'll just go through um so let's see i guess first i need to run it um what are the because this is not going to be running um actually i think i can just oh yeah optional settings host port that's fine okay so when you when you run an image it just starts up right here um and it it kind of has a bunch of default settings so let's make sure that it's working can't be reached connection refused what's the problem let's see if what did i do wrong they're assuming that you know how to run it docker run ah here we go so this this this is what i'm missing here let me zoom in um so one thing to keep in mind is with docker it's virtualization and so there's a virtual network that you need to port or map to your real network so this won't work so let me axe this and what i so what i saw here is run you know dash p so that's port so that will map port 6333 um 6333 um to port 6333 6333 yeah okay um so that'll map it from the from the in inside to outside um and then we can go ahead and kill this delete forever um we can come back here um let's see so because it'll it'll keep it'll keep your um your original copy so optional settings um six three three six three three wait why did it oh interesting here let me try it here there we go that's what you wanted to see allow access and then it should be yep quadrant quadrant containers view details okay so that's just a copy of the output um let's see open with browser there we go okay so now it just spits back its version so it's in version 0.9.1 that's fine that's what we would expect okay so let's come back to their quick start guide all right so first let's create a collection with dot product metric so we're going to say we're going to try something with a doc a vector size of 4 and we're going to use dot product as our distance so let's copy this and then we'll come here actually now i need a new cdq drint demo and then we'll uh distance is not recognized oh it didn't like it okay let's close this as my last project all right so it doesn't like the backslashes so we'll get rid of the backslashes data raw okay so curl is installed in windows now by default so curl x put so put is the http command so we're going to go to localhost 6333 collections test collection content type and then it'll start with this data raw so when you do dash dash data raw you're basically sending it raw json with curl okay cls here this is too big it didn't like that either i wonder if it doesn't like it let's see unmatch close huh this missing url i wonder if it doesn't like it because this is on windows let's try that see if it gets rid of some of these errors so difference between linux and windows is sometimes single quote versus double quote yeah okay so that fixed that part so then how do you quote [Music] let's see uh curl windows tutorial you can tell how free how infrequently i use this um let's see json let's see um curl raw data json and we'll say windows okay is with double quotes okay is it really that simple all right so we'll just try and change it to double quotes i would think that it wouldn't work because it'll exit it out but we'll see he must be string length result null status error json d serialize error must be a string at line one column one column two yeah so it exited that doesn't make any sense oh you gotta escape out of it okay that's what i forgot okay all right we're getting there all right so what you do is you escape out with the backslash before the in inner ones so that's the json serializing uh it's so complicated hey there we go okay so we got the result that we needed right here so we come back to the quick start and this is the expected response um and we can ensure that the collection was created so what will come or actually here's here's what i'll do i'll copy i'll copy this out um into dude so we'll save this not under auto muse we'll do q drink demo and so we'll say um windows curl commands so that way if you're following along at home um you can uh whoops you can um get the uh there we go copy and so then we'll replace the single quote with the double quote because windows is finicky like that and we'll come back here uh result green optimizer status okay index vector count blah blah so there we go we're good for that expected response and of course this shows you the response structured whereas windows just barfs it out okay so let's add some points so we're going to need to clean this up so basically but let's take a look at this so what do what does it mean by adding points so uh basically what it means is we're adding data points um and i haven't gone through this before as you can tell from the mistakes i'm making um so let's see points so if you send it a json so the the outer curly bracket that instantiates the json and then you say okay points um is the first element and then it's a list and the list contains id vector or it contains it contains sub elements each of which is a hash table um that set that contains the elements id vector payload okay i wonder if you have to do the id yourself interesting because it's like then how do you do you have to keep track of that every time like do i have to increment the id or what but i like how it's got this the um the payload it looks like it's highly variable right um there's different you can see that there's different payloads so you can you have an arbitrary amount of information you can attach to it which is actually really perfect for me because that this is going to be critical for my nexus service so let's copy this and put it out here and now we gotta clean this up so first let's replace um actually here let's copy this into a new one so first we'll replace um those with backslash that so a standard uh double quote with backslash double quote replace all so that escapes all of those and then we'll replace the single quotes with a double quote and then we will replace um well here we'll just do it this way data raw um yeah that should be fine so basically all i'm doing is just getting this into a single line because windows does not know how to handle multiple lines and copy paste this back over here alright whoops completed status okay that was fast dang look at that .0002 seconds dang now granted these are small vectors so that's fine go ahead and save that um okay expected response yup oh yeah theirs was about just as fast so that's really dang fast okay so search with filtering so okay you so the the basic thing is you post or you do a put rather not a post so you do a put and that's how you you send stuff to it so you can't get much simpler than that and then you do search so let's go ahead and copy this out and we'll do a quick search but um let's look at what this is so the search is you're doing a post okay so put is how you put um you put stuff up there um actually what what did we do to create it it was a put okay so to create the collection you use put to um to add data points you use put and then to do a search you use post so let's come out here go ahead and we'll do the same changes here actually i think i know how i'm going to do this so first let's go ahead and i'll teach you just a little bit of um of regex if you don't know that so uh backslash is the universal escape so if you do backslash backslash that escapes um that escapes the uh the escape so that you can then replace it with something so first let's just get rid of those we don't want any backslashes and then what we'll do is what i like to do is i'll do um backslash space so that is that is white space so backslash space is any white space and we want any white space of two or greater right so that gives us that captures all the new lines and so we'll replace those with just a single space so that brings it all into a single line and then what we'll do is we'll do the um we'll replace the double quotes and so we'll switch back to normal mode here so we'll replace the double quotes with an escaped double quote and then we'll replace the single quote with with the double quote and so now i have programmatically fixed this um fix this uh what you may call it um carl command the search one okay so let's get this and let's see if if the search works so do clear screen result there we go id4 version score so it gave me a score null null and let's see if that is what we expected um yes so payload null score etc etc okay and it took that was dang fast um let's see time yeah it was almost as fast on my computer but the result is different if we add a filter so then we can we can filter our responses um so there you go and it will it will reply with the top um so you give it top three and this is really similar to what i've done with my with my nexus microservice so this is this is basically a search microservice and it looks like it's really darn fast i think the combination of filtering will be good okay so let's go ahead and clean this up so we can go back we'll do backslash backslash and just replace that with a space replace all and then we'll go to those bring it all into one line and then we'll do um the individual quote or sorry the um double quote replace it with a backslash double quote and then a single quote with a double quote and you can save these as macros too um okay so this should do a search with a filter and there you go it replies with just uh just the two okay so um there you have it we've got that started but we're not done because i'm not going to manually type in curl commands all the time we need to do this with actual um with actual like python code so let's go to the step-by-step tutorial next okay so we've got it running what is neural search this will give you an overview of you know blah blah the curse of dimensionality i remember that when i started learning about support vector machines um i definitely recommend you read this if you're not familiar with neural search or embeddings and so on and so forth um and then okay so you scroll all the way down here's the um here's the uh the like the full thing um here let me go into q-drint okay it doesn't have the data stored here because it says that it will store it oh i guess uh let's see run the service inside the docker you should see output like this present oh okay so all right the that the dash v that will do that that'll do the storage so what i'm doing right now is not going to be persistent save two and will be persisted even if you recreate the container yeah so what this does is it'll map the um the internal storage to the external storage um because one thing to keep in mind is that containers are exactly that they're fully self-contained unless you map stuff from inside to outside the virtual environment um okay so let's go ahead and do this so now we need so now we need to actually do the python bit so we'll do pip install qdrint client so this will install the the python client for us ta-da there we go so let's go ahead and start a new um python i think we'll just copy this and we'll save this q-drint demo python and so we'll say huge rent demo pi okay um so when you instantiate the quadrant client i'll just call it quadrant because that's easier to say i don't know how they say it but um so from quadrant client import quadrant client quadrant client equals quadrant client local host port 633 okay cool all all standard all straightforward um all right let's come back over here so now we're going to re why does it say recreate collection interesting it says recreate instead of create let's see if that works um okay so cosine similarity okay oh so dot product and cosine similarity are different things i just learned that um and so the distance tells you how it's going to calculate it um [Music] okay so actually i guess this will be um we'll just save this as a separate separate one all right so let's run this and see what happens python quadrant demo and it gave no output i guess if we come back to our curl commands we can probably test it so this was the this was the test collection but the one that we just created was called startups so let's redo this and instead we'll do startups and there it is okay so we verified that it works um but what i'll do next is well here that's that's fine um start a new one we'll do python and so this will be okay create an iterator over startup and data vectors see where does this come from startups we should have startups records file in startups.json where did that come from did i skip something i probably skipped something it wants me to have something where is this file startups list raw data can parse data can be found at this link there it is okay so let's come back here and we'll do uh save link as um and then we'll come here we'll do cudrant and we'll do startups dot well here that's yeah dot json okay make sure that it's here there we go startups.json all right so now um first we will do we'll rename this to quadrant instantiate um so there we go all right no and we'll reopen that quadrant instantiate cool close that and we'll do a copy of this quadrant instantiate and then we'll call this quadrant populate yay quadrant populate all right so then we will edit that with notepad plus plus and we'll come back over to their tutorial now that i figured out what i was missing and then we will go down to here all right so fd equals open startups.json so there it is payload equals map json loads dot fd payload is now an iterator okay here we load all the vectors into memory numpy array works as an iterable for itself startup vectors oh i need to make the vectors where's the startup vectors see i do everything the hard way is that what map did no startup yeah that's got to be a file somewhere hmm i vaguely remember seeing sentence transformers yeah pip install make a search api yeah because because the the this this data was pre-prepared somewhere but i don't know where i don't know where that's fine open terminal um pwd dir uh cd quadrant uh cd stored sure okay i don't know but we will go ahead and try maybe i'll just make it myself tip install sentence transformers so sentence transformers is pre-trained on bert and other things so that you don't have to use um google universal sentence encoder as a microservice um so we'll see how fast it is um yeah actually how long is this video oh wow we're at 27 minutes okay i might not make it through the whole tutorial but we've gotten to a good good we've gotten a good start so i'll probably uh stop the video here in a second um and then i'll finish working on this actually i'll go ahead and pause it and figure this out yeah and then we'll we'll we'll get this done i'll just figure i'll get the uh the um this part this part figured out okay be right back okay we're back um i couldn't find the files so i just made my own i copied logs from a recent project so i've got 25 sentences here um and i'm going to get the embeddings myself so i just wrote a little thing to load those and then we're using the all mpnetbase v2 from sentence transformers so then we'll just do print sentence embeddings and we'll go from there so just show you where it's at so far it takes a second to run so there you have it you've got a list of embeddings all right so now we will go back over to i had to open up a few things um that's mine uh tutorial there we go okay so we will come here and then we'll come back down to here all right so i'll leave the the collection name startups i'm not doing startups so vectors will change that name to embeddings and then um payload will be payload i think that should work um it might prefer that that's a list we'll see what happens um okay worst thing that will happen is that it blows up takes a second to load quadrant client is not defined what do you mean it's not defined and come down here okay anyways so it takes 3.2 seconds to do those embeddings it's doing it on cpu i'll need to look at how to do uh the sentencing uh sentence transformers on gpu um actually let me pause that and i'll figure it out real quick okay i looked it up it's right here um you have to do with pi torch i've got anaconda i'll figure it out later um it's not that big a deal um okay so anyways yeah all right i think we're ready to test this so we'll instantiate the quadrant client um and then we'll upload this collection so we'll use the sentence embeddings and the payload and we'll go from there um let's see what happens so now it's going to spool up those embeddings quadrant client is not defined what do you mean it's not defined oh i have to import it hey okay let's try it again it's not a valid dict yeah i thought they would want a dictionary okay so let's fix this real quick um let's see it's gonna want um info equals so we'll just do um file name equals file and then content equals that and then we'll do dot append um and then for for sentences equals list and we'll do um sentence sentences there we go dot append info content okay so then we will embed the sentences and the payload will be that okay that should work and we're almost done i promise hey look at that okay so then we come back over here and instead of test collection we will get startups okay and then it says vector size 768 so it like that shard number one points count 25 so there's all 25 in there cool um and then i guess let's do a quick search uh let's see oh i guess i'd have to do a vector i'm not going to worry about it okay i think we're at a good stopping point um yeah so doing this with so i will say that um that the google universal sentence encoder is infinitely faster than sentence transformer even with uh even on cpu so i will probably default to that anyways um yeah because if you don't need to rely on gpu and it's fast enough probably stick with that but yeah so quadrant it seems like it's uh it's pretty fast and we'll go from there i will probably work on embedding this into all of my microservices so thanks for watching and have a good day